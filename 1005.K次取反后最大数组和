//贪心算法

class Solution {

private:

    static bool cmp(const int a, const int b) {

        return abs(a) > abs(b);

    }

public:

    int largestSumAfterKNegations(vector<int>& nums,

                                             int K) {

        

        sort(nums.begin(), nums.end(), cmp);

        

        //第一次贪心

        for(int i=0; i<nums.size(); i++) {

            if(K>0 && nums[i] < 0) {

                nums[i] *= (-1);

                K--;

            }

        }

        

        int index = nums.size()-1;

        

        //第二次贪心

        if(K > 0) {

            //1. 奇数次－改变

            if(K % 2) nums[index] *= -1;

            

            //2.偶数次－不变

            //else 

        }

        

        int result = 0;

        

        for(int num : nums)

            result += num;

        

        return result;

    }

};

