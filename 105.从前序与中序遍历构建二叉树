/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

private:

    TreeNode* traversal(vector<int>& preorder,

                    int preorderBegin,int preorderEnd,

                    vector<int>& inorder,

                    int inorderBegin,int inorderEnd) {

        //1.退出条件

        if(preorderBegin==preorderEnd)

            return nullptr;

        

        //2.构建父节点

        int rootVal = preorder[preorderBegin];

        TreeNode* root = new TreeNode(rootVal);

        

        ////3.查找切割点

        int delimiterIndex = 0;

        for(delimiterIndex=inorderBegin; 

                            delimiterIndex!=inorderEnd; 

                            delimiterIndex++) {

            if(inorder[delimiterIndex]==rootVal)

                break;

        }

        

        //4.切割中序数组

        int leftInorderBegin = inorderBegin;

        int leftInorderEnd = delimiterIndex;

        int rightInorderBegin = delimiterIndex+1;

        int rightInorderEnd = inorderEnd;

        

        //5.切割前序数组

        int leftPreorderBegin = preorderBegin+1;

        int leftPreorderEnd = preorderBegin+1+

                        (delimiterIndex-inorderBegin);

        int rightPreorderBegin = preorderBegin+1+

                        (delimiterIndex-inorderBegin);

        int rightPreorderEnd = preorderEnd;

        

//6.递归遍历，创建左右孩子
        root->left = traversal(preorder,
                    leftPreorderBegin,leftPreorderEnd,
                    inorder,
                    leftInorderBegin,leftInorderEnd);
        root->right = traversal(preorder,
                   rightPreorderBegin,rightPreorderEnd,
                   inorder,
                   rightInorderBegin,rightInorderEnd);
        
        //返回父亲结点
        return root;
    }

public:
    TreeNode* buildTree(vector<int>& preorder, 
                                vector<int>& inorder) {
        if(preorder.size()==0 || inorder.size()==0) 
            return nullptr;
        
        return traversal(preorder,0,preorder.size(),
                         inorder,0,inorder.size());
    }
};

      
