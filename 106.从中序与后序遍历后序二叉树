/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

//中序遍历，后序遍历>构造二叉树

class Solution {

private:

    TreeNode* traversal(vector<int>& inorder,vector<int>& postorder) {

        //退出条件

        if(inorder.size()==0 || postorder.size()==0) 

            return nullptr;

        

        //后序最后一个元素构造，父亲结点

        int rootVal = postorder[postorder.size()-1];

        TreeNode* root = new TreeNode(rootVal);

        

        //(在中序里)，查找切割点

        int delimiterIndex = 0;

        for(delimiterIndex=0; delimiterIndex<postorder.size(); delimiterIndex++) {

          if(inorder[delimiterIndex] == rootVal)

                break;

        }

        
  //切割中序数组
        int leftInorderBegin = inorderBegin;
        int leftInorderEnd = delimiterIndex;
        int rightInorderBegin = delimiterIndex+1;
        int rightInorderEnd = inorderEnd;
        
        //切割后序数组
        //leftPostoderEnd  是postorderBegin加上差距
        int leftPostoderBegin = postorderBegin; 
        int leftPostoderEnd = postorderBegin+
                        (delimiterIndex-inorderBegin);
        int rightPostoderBegin = postorderBegin+
                        (delimiterIndex-inorderBegin);
        int rightPostoderEnd = postorderEnd-1;
        
        //递归，创建左右孩子
        root->left = traversal(inorder,
                   leftInorderBegin,leftInorderEnd,  
                   postorder,
                   leftPostoderBegin,leftPostoderEnd);
        root->right = traversal(inorder,
                  rightInorderBegin,rightInorderEnd,
                  postorder,
                  rightPostoderBegin,rightPostoderEnd);
        
        //返回创建的父亲结点
        return root;
    }
    
    
public: 
    TreeNode* buildTree(vector<int>& inorder,
                            vector<int>& postorder) {
                                
        if(inorder.size()==0 || postorder.size()==0)
            return nullptr;
            
        return traversal(inorder,0,inorder.size(),
                       postorder,0,postorder.size());
    }
};


