/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

public:

    bool hasPathSum(TreeNode* root, int targetSum) {

        stack<pair<TreeNode*,int>> stk;

        if(root == nullptr) return false;

        

        stk.push(pair<TreeNode*,int>(root,root->val));

        while(!stk.empty()) {

            pair<TreeNode*,int> node = stk.top();

            stk.pop();

            

            //判断

            if(!node.first->left && !node.first->right 

                            && node.second==targetSum)

                return true;

            

            //右
            if(node.first->right) {
               stk.push(pair<TreeNode*,int>
                 (node.first->right,
                  node.second+node.first->right->val));
            }
            
            //左
            if(node.first->left) {
                stk.push(pair<TreeNode*,int>
                  (node.first->left,
                   node.second+node.first->left->val));
            }
        }
        return false;
    }
};
 
    
//方法二
/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

private: 

    bool traversal(TreeNode* node,int sum) {

        if(!node->left && !node->right && sum==0)

            return true;

        if(!node->left && !node->right)

            return false;

            

        //左

        if(node->left) {

            sum -= node->left->val;

            if(traversal(node->left,sum))

                return true;

            sum += node->left->val;

        }

        

        //右

        if(node->right) {

            sum -= node->right->val;

            if(traversal(node->right,sum))

                return true;

            sum += node->right->val;

        }

        return false;
        public:

bool haspathSum(TreeNode* root, int targetSun if(root == nullptr) return false;

bool result = traversal(root,targetSum-root->v return result;
}

};
  
