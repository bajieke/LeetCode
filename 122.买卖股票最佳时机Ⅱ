/*

//贪心法

class Solution {

public:

    int maxProfit(vector<int>& price) {

        //只有一个 or 没有元素

        if(price.size() < 2) return 0;

    

        int resultSum = 0;

        

        //nums[1]要有意义，则nums.size()>=2

        for(int i=1; i<price.size(); i++) {

            int diff = price[i] - price[i-1];

            

            //局部最优

            if(diff > 0) resultSum += diff;

        }

        

        return resultSum;

    }

};

*/

//无限笔交易

//动态规划

class Solution {

public:

    int maxProfit(vector<int>& prices) {

        //定义

        vector<vector<int>> dp(prices.size(), 

                               vector<int>(2));

        

        //初始化

        dp[0][0] = -prices[0];

        dp[0][1] = 0;

        

        for(int i = 1; i < prices.size(); i++) {

            //持有股票

            //上次买入，本次买入

            dp[i][0] = max(dp[i-1][0], 

                           -prices[i] + dp[i-1][1]);

            

            //不持有股票

            //上次卖出，本次卖出

            dp[i][1] = max(dp[i-1][1], 

                           prices[i] + dp[i-1][0]);

        }

        

        return dp[prices.size()-1][1];

    }

};

    
