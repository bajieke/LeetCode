/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

 

 

 

 

class Solution {

private:

    int res = INT_MIN;

    int dfs(TreeNode* cur) {

        //退出条件

        if(cur == nullptr) return 0;

        

        //结点值，为负时， 直接选0

        int left = max(0, dfs(cur->left));

        int right = max(0, dfs(cur->right));

        

        

        //左边最大，右边最大，＋本位 -->整体大小

        res = max(res, cur->val + left + right);

        

        

        //左边枝   右边枝

        return max(cur->val + left, 

                   cur->val + right);

        //因为，要连成单一条枝

    }

public:

    int maxPathSum(TreeNode* root) {

    

        dfs(root);

        

        return res;

    }

};

