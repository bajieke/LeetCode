//动态规划

class Solution {

public:

    int minCut(string s) {

        //判断[i, j]是不是回文子串，

        //isPalindrome[i][j]

        vector<vector<bool>> isPalindrome(s.size(), 

                        vector<bool>(s.size(), false));

        //[i, j]  ->  (i <= j)

        for(int i = s.size() - 1; i >= 0; i--) {

            for(int j = i; j < s.size(); j++) {

                if(s[i] == s[j] && 

             (j-i <= 1 || isPalindrome[i+1][j-1])) {

                    isPalindrome[i][j] = true;

                }

            }

        }

        

        //动规

        vector<int> dp(s.size(), 0);

        for(int i = 1; i < s.size(); i++) {

            dp[i] = i;

        }

        dp[0] = 0;

        

        for(int i = 1; i < s.size(); i++) {

            //是回文串

            if(isPalindrome[0][i]) {

                dp[i] = 0;

            

                continue;

            }

            //不是回文串

// [O, i]

//[O, j] [j+1, i]

for(intj=0;j<i;j++)

if(isPalindrome[j+1][i]) [

dp[i]= min(dp[i],dp[j]+1);

return dp[s.size() - 1];

了

];

           
