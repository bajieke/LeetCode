/**

 * Definition for singly-linked list.

 * struct ListNode {

 *     int val;

 *     ListNode *next;

 *     ListNode() : val(0), next(nullptr) {}

 *     ListNode(int x) : val(x), next(nullptr) {}

 *     ListNode(int x, ListNode *next) : val(x), next(next) {}

 * };

 */

 /*

class Solution {

public:

    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        

    }

};

*/

/*

//合并有序链表

class Solution {

public:

    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {

        ListNode* p1 = list1;

        ListNode* p2 = list2;   

        

        //特殊情况

        if(p1 == nullptr && p2 == nullptr) {

            return p1;

        }

        

        if(p1 == nullptr || p2 == nullptr) {

            return p1==nullptr ? p2 : p1;

        }

        

        //确定开头

        ListNode* head = nullptr, *cur = nullptr;

        if(p1->val < p2->val) {

            head = cur = p1;

            p1 = p1->next;

        }

        else {

            head = cur = p2;

            p2 = p2->next;

        }

        

        //开始合并

        while(p1 && p2) {

            if(p1->val < p2->val) {

                cur->next = p1;

                cur = p1;

                p1 = p1->next;

            }

            else {

                cur->next = p2;

                cur = p2;

                p2 = p2->next;

            }

        }

        

        //一个链表长，一个链表短

        if(p1) {

            cur->next = p1;

        }

        else {

            cur->next = p2;

        }

        

        //返回保存的头结点

        return head;

    }

};

*/

//递归

class Solution {

public:

    ListNode* mergeTwoLists(ListNode* p1, ListNode* p2) {

        //退出条件

        if(p1 == nullptr) return p2;

                

        if(p2 == nullptr) return p1;

        

        //连接－递归

        if(p1->val <= p2->val) {

            //连接

            p1->next = mergeTwoLists(p1->next, p2);

            

            //返回－上一层你对p1, p2之间进行的选择

            return p1;

        }

        else {

            p2->next = mergeTwoLists(p1, p2->next);

            return p2;

        }

        

        //一般不会走到这一步

        return nullptr;

    }

};

 
