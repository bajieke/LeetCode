/**

 * Definition for singly-linked list.

 * struct ListNode {

 *     int val;

 *     ListNode *next;

 *     ListNode() : val(0), next(nullptr) {}

 *     ListNode(int x) : val(x), next(nullptr) {}

 *     ListNode(int x, ListNode *next) : val(x), next(next) {}

 * };

 */

 

 

 /*

 两两合并

class Solution {

private:

    //递归

    //合并排序两链表－返回新链表头结点

    ListNode* merge(ListNode* p1, ListNode* p2) {

        //退出条件

        if(p1 == nullptr) return p2;

                

        if(p2 == nullptr) return p1;

        

        //连接－递归

        if(p1->val <= p2->val) {

            //连接

            p1->next = merge(p1->next, p2);

            

            //返回－上一层你对p1, p2之间进行的选择

            return p1;

        }

        else {

            p2->next = merge(p1, p2->next);

            return p2;

        }

        

        //一般不会走到这一步

        return nullptr;

    }

    

public:

    ListNode* mergeKLists(vector<ListNode*>& lists) {

        if(lists.size() == 0) return nullptr;

        

        ListNode* head = lists[0];

        

        for(int i = 1; i < lists.size(); i++) {

            //

            head = merge(head, lists[i]);

        }

        

        return head;

    }

};

*/

//优先队列

class Solution {

private:

    struct cmp {

        //按照 greater<T>, 自定义－从小到大排序

        bool operator()(ListNode* a, ListNode* b) {

            return b->val < a->val;

        }

    };

public:

    ListNode* mergeKLists(vector<ListNode*>& lists) {

        //构建优先队列，根据优先级排序

        //top优先级最高

        priority_queue<ListNode*, 

                       vector<ListNode*>,

                                     cmp> pri_queue;

        //链表头入队

        for(int i = 0; i < lists.size(); i++) {

            if(lists[i]) {

                pri_queue.push(lists[i]);

            }

        }

        

        //虚拟头结点

        ListNode* dummy = new ListNode(1);

        ListNode* cur = dummy;

        

        //构建升序链表

        while(!pri_queue.empty()) {

            ListNode* top = pri_queue.top();

            pri_queue.pop();

            

            cur->next = top;   //连接

            cur = cur->next;   //更新cur

            

            if(top->next) pri_queue.push(top->next);

        }

        

        return dummy->next;

    }

};
