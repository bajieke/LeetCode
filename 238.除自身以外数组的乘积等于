/*

class Solution {

public:

    vector<int> productExceptSelf(vector<int>& nums) {

        vector<int> left(nums.size());

        vector<int> right(nums.size());

        

        vector<int> answer(nums.size());

        

        left[0] = 1;

        for(int i = 1; i < nums.size(); i++) {

            left[i] = left[i-1] * nums[i-1];

        }

        

        right[nums.size()-1] = 1;

        for(int i = nums.size()-2; i>=0; i--) {

            right[i] = right[i+1] * nums[i+1];

        }

        

        for(int i = 0; i < nums.size(); i++) {

            answer[i] = left[i] * right[i];

        }

        

        return answer;

    }

};

*/

//空间优化－－时间优化

class Solution {

public:

    vector<int> productExceptSelf(vector<int>& nums) {

        //

        vector<int> answer(nums.size());

        

        answer[nums.size()-1] = 1;

        for(int i = nums.size()-2; i >=0; i--) {

            answer[i] = answer[i+1] * nums[i+1];

        }

        

        int temp = 1;

        for(int i = 1; i < nums.size(); i++) {

            temp *= nums[i-1];

            

            answer[i] = answer[i] * temp;

        }

        

        return answer;

    }

};
