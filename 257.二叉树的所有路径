/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

public:

    vector<string> binaryTreePaths(TreeNode* root) {

        stack<TreeNode*> treeStk;

        stack<string> pathStk;

        vector<string> result;

        

        if(root == nullptr) return result;

        

        treeStk.push(root);

        pathStk.push(to_string(root->val));

        

        while(!treeStk.empty()) {

            //中

            TreeNode* node = treeStk.top();

            treeStk.pop();

            string path = pathStk.top();

            pathStk.pop();

            

              //插入条件

            if(node->left==nullptr && node->right==nullptr) {

                result.push_back(path);

            }

            

            //右

            if(node->right) {

                treeStk.push(node->right);

                pathStk.push(path + "->" + 

                          to_string(node->right->val));

            }

            

            //左

            if(node->left) {

                treeStk.push(node->left);

                pathStk.push(path + "->" + 

                           to_string(node->left->val));

            }

        }

        return result;

    }

};
