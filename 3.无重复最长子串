//

// 字母不重复时，j向右滑动

//      重复时，i更新位置到这个重复字母的下一位置

//

//滑动窗口

class Solution {

public:

    int lengthOfLongestSubstring(string s) {

        //标记出现过的字母的，在字符串中的下一位置

        vector<int> memory(128, 0);

        

        int i = 0;

        int ans = 0;

        

        for(int j = 0; j < s.size(); ++j) {

            //s[j]这个字母之前已经出现，标记了

            if(memory[s[j]] != 0) {

                //i = memory[s[j]];

                

                //有可能上次标记的太远，

                //还不如新更新的i

                i = max(i, memory[s[j]]);

            }

            

            //标记，下一位置

            memory[s[j]] = j + 1;

            

            //最远距离

            ans = max(ans, (j - i + 1));

        }

        

        return ans;

    }

};

//   0  1  2  3  4

//   a  b  b  a  c

//   i

//   j

//      j

//         i

//         j

//            j

//               j
