//动态规划——冷冻期(无限笔)

class Solution {

public:

    int maxProfit(vector<int>& prices) {

        //防止prices[0]未知

        if(prices.size() == 0) return 0;

        

        //定义＋初始化

        vector<vector<int>> dp(prices.size(), vector<int>(5, 0));

        

        //第1天买入状态

        dp[0][0] = -prices[0];

        

        //状态推导

        for(int i = 1; i < prices.size(); i++) {

            //买入状态－0

            dp[i][0] = max(dp[i-1][0], -prices[i] + max(dp[i-1][1], dp[i-1][3]));

            

            //度过冷冻期－1

            dp[i][1] = max(dp[i-1][1], dp[i-1][3]);

            

            //卖出状态－2

            dp[i][2] = prices[i] + dp[i-1][0];

            

            //冷冻期－3

            dp[i][3] = dp[i-1][2];

        }

        

        int len = prices.size();

        

        //从 1 2 3状态中选择，剩余最大金额

        return max(dp[len-1][1], max(dp[len-1][2], dp[len-1][3]));

    }

};
