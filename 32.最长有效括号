/*

//利用栈－对称

class Solution {

public:

    int longestValidParentheses(string s) {

        stack<int> stk;

        int result = 0;

        

        int start = 0;

        

        for(int i = 0; i < s.size(); i++) {

            if(s[i] == '(') {

                stk.push(i);

            }

            else { //  s[i] == ')'

                //当前右括号，栈内有左括号可匹配

                if(!stk.empty()) {

            

                    stk.pop();

            

                    //栈不为空－先记录当前的

                    if(!stk.empty()) {

                        result = max(result, 

                                          i-stk.top());

                    }

                    else { //pop后，栈空

                        //以start开始的这一轮，完美结束

                        result = max(result, 

                                            i-start+1);

                    }

                }

                // stk 为空，栈内无左括号匹配

                else { 

                    //当前是右括号，栈内为空

                    //更新下一轮的开始 start

                    start = i + 1;

                }

            }

        }

        

        return result;

    }

};

*/

/

//－－－－－－别人的动态规划，看起来很复杂－－随便理解了下

class Solution {

public:

    int longestValidParentheses(string s) {

        int n = s.size();

        vector<int>dp(n,0);

        int big=0;

        for(int i=1;i<n;i++)

        {

            if(s[i]==')')

            {

                if(s[i-1]=='(')

                {

                    dp[i]=2;

                    if(i-2>=0)

                        dp[i]=dp[i]+dp[i-2];

                }

                else if(dp[i-1]>0)

                {

                    int lastSingleIndex=i-dp[i-1]-1;

                    if(lastSingleIndex>=0 && 

                            s[lastSingleIndex]=='(')

                    {

                        dp[i]=dp[i-1]+2;

                        if(lastSingleIndex-1>=0)

                        {

                            dp[i]=dp[i]+

                                dp[lastSingleIndex-1];

                        }

                    }

                }

            }

            big=max(big,dp[i]);

        }

        return big;

    }

};

*/

    
  
