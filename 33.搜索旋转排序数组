/*

//暴力算法

class Solution {

public:

    int search(vector<int>& nums, int target) {

        //遍历

        for(int i = 0; i < nums.size(); i++) {

            if(nums[i] == target) {

                return i;

            }

        }

        

        return -1;

    }

};

*/

/*

class Solution {

private:

    //二分查找，不是递归查找啊

    int find(vector<int>& nums, int left, int right, 

                                         int target) {

        int mid = 0;

        

        while(left <= right) {

            mid = left + (right-left)/2;

            

            if(nums[mid] == target) {

                return mid;

            }

            else if(nums[mid] < target){

                left = mid + 1;

            }

            else {

                right = mid - 1;

            }

        }

        

        return -1;

    }

        

public:

    int search(vector<int>& nums, int target) {

        //for循环中，遗漏的nums[0]

        if(nums[0] == target) return 0;

        

        int idx = 0;

        

        for(int i = 1; i < nums.size(); i++) {

            if(nums[i] == target) {

                return i;

            }

            

            if(nums[i-1] > nums[i]) {

                idx = i - 1;

                break;

            }

        }

        

        //左部分没有，只能右部分二分查找走起

        int res = find(nums, idx+1, nums.size()-1, 

                                            target);

        return res;

    }

};

*/

// 寻找idx－－－二分查找

// 寻找target－－二分查找

class Solution {

public:

    int search(vector<int>& nums, int target) {

        //用二分法，查找idx

        int left = 0;

        int right = nums.size()-1;

        

        // left == right时，就是分割点

        while(left < right) {

            //陷入死循环

            //int mid = left + (right-left)/2;

            int mid = left+(right-left+1)/2;

            //如果是 偶数个 元素，mid 要是后边那个

            //不然会进入死循环

            

            if(nums[mid] >= nums[0]) {

                left = mid;

            }

            else {

                right = mid - 1;

            }

        }

        

        //分成两部分 [0, left] [left+1, n-1]

        

        if(target < nums[0]) {

            left = left + 1;

            right = nums.size() - 1;

        }

        else if(target > nums[0]){

            left = 0;

        }

        else  if(target == nums[0]){

            return 0;

        }

        

        //二分查找

        while(left <= right) {

            int mid = left + (right-left)/2;

            

            if(target > nums[mid]) {

                left = mid + 1;

            }

            else if(target < nums[mid]){

                right = mid - 1;

            }

            else {

                return mid;

            }

        }

        

        return -1;

    }

};

            

        

        
