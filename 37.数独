//回溯法

class Solution {

private:

    bool isVaild(int row,int col,vector<vector<char>>

                                      &board,int val) {

        //同一行，是否重复

        for (int j = 0; j < 9; j++) {

            if (board[row][j] == val)

                return false;

        }

        

        //同一列，是否重复

        for(int i =0; i < 9; i++) {

            if (board[i][col] == val) 

                return false;

        }

        

        //所在3×3矩阵，是否重复

        int startRow = (row/3) * 3;

        int startCol = (col/3) * 3;

        

        for(int i=startRow; i<startRow+3; i++) {

            for(int j=startCol; j<startCol+3; j++) {

                if(board[i][j] == val)

                    return false;

            }

        }

        

        return true;

    }

    

    //找到一个我就不再寻找了

    bool backTracking(vector<vector<char>>& board) {

        for (int i = 0; i < board.size(); i++) {

            for (int j = 0; j < board[0].size(); j++) {

                //有数字

                if(board[i][j] != '.')

                    continue;

                    

                 //空格

                for(char k='1'; k<='9'; k++) {

                    //在[row][col]所选位置，k是否能填入

                    if(isVaild(i,j,board,k)) {

                        board[i][j] = k;

                        

                        //没有终止条件

                        //所以，找到最末叶子符合条件就返回

                        if(backTracking(board))

                            return true;

                        //backTracking(board);

            

                        board[i][j] = '.';

                    }

                } //k

                //确定了位置，无法填数--->数独解决不了

                return false;

            }//j

        }//i

        

        //全部递归完，没有返回false

        return true;

    }

public: 

    void solveSudoku(vector<vector<char>>& board) {

        

        backTracking(board);

        

    }

};

            

 
