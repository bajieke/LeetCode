class Solution {
private:
    vector<vector<int>> result;
    vector<int> path;
    
    void backTracking(vector<int>& candidates,
                   int target,int sum,int startIndex) {
        //退出条件
        if(sum > target)
            return;
            
        if(sum == target) {
            result.push_back(path);
            return;
        }
        
        //递归-回溯      //第一次不满足条件，它就不会往下走了
        for(int i=startIndex; i<candidates.size() && 
                             sum+candidates[i]<=target;
                                                   i++)
                                                     {
            path.push_back(candidates[i]);
            sum += candidates[i];
            
            backTracking(candidates,target,sum,i);
            
            sum -= candidates[i];
            path.pop_back();
        }
        return;
    }
    
    
public:
    vector<vector<int>> combinationSum(vector<int>& 
                               candidates,int target) {
        result.clear();
        path.clear();
        
        if(candidates.size() == 0) 
            return result;
        
        //不排序，会出错      for循环那里的逻辑问题
        sort(candidates.begin(),candidates.end());
        backTracking(candidates,target,0,0);
        
        return result;
    }
};
