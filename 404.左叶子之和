/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

public:

    int sumOfLeftLeaves(TreeNode* root) {

        if(root == nullptr) return 0;

        

        int result = 0;

        stack<TreeNode*> stk;

        

        stk.push(root);

        while(!stk.empty()) {

            TreeNode* node = stk.top();

            stk.pop();

            

            //无

             

            //右

            if(node->right) {

                stk.push(node->right);

            }

            

            //左

            if(node->left) {

                if(!node->left->left && !node->left->right)

                    result += node->left->val;

                stk.push(node->left);

            }

        }

        return result;

    }

};






//方法二

    /**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

private:

    int count = 0;

    void traversal(TreeNode* node) {

        if(node == nullptr) return;

        

        if(node->left) {

            if(!node->left->left && !node->left->right)

                count += node->left->val;

            traversal(node->left);

        }

        

        if(node->right) {

            traversal(node->right);

        }

        

        return;

    }

    

public:

    

    int sumOfLeftLeaves(TreeNode* root) {

        if(root == nullptr) return 0;

        traversal(root);

        

        return count;

    }

};
