//递归法

class Solution {

public:

    TreeNode* deleteNode(TreeNode* root, int key) {

        //退出条件

        //没找到

        if(root == nullptr) return nullptr;

        

        //找到了，处理部分

        if(root->val == key) {

          //1.左右孩子都为空－－－－－－－－－－－－－－－－

            // 0   0

            if(!root->left && !root->right)

                return nullptr;

            

          //2.左孩子存在，右孩子存在－－－－－－－－－－－－

            // 1   0

            else if(root->left && !root->right)

                return root->left;

          

          //3.左孩子为空，右孩子为空－－－－－－－－－－－－

            // 0   1

            else if(!root->left && root->right)

                return root->right;

            

          //4.左右孩子都不为空 －－－－－－－－－－－－－－

            // 1   1

            else {

                TreeNode* leNode = root->left;

                root->left = nullptr;

                //左子树 放 右子树(最左结点)

                TreeNode* node = root->right;

                    while(node->left) {

                    node = node->left;

                }

                node->left = leNode;

                //处理删除结点

                TreeNode* deleteNode = root;

                root = root->right;

                delete deleteNode;

                return root;

            }

        }

        

        //向左

        if(key < root->val)

            root->left = deleteNode(root->left,key);

        

        //向右

        if(key > root->val)

            root->right = deleteNode(root->right,key);

        

        return root;

    }

};

      
