//回溯法

class Solution {

private:

    vector<vector<int>> result;

    vector<int> path;

    

    void backTracking(vector<int>& nums,vector<bool>&

                                               used) {

        //退出条件－递归深度限制

        if(path.size() == nums.size()) {

            result.push_back(path);

            return;

        }

        

        //递归－回溯

        for(int i=0; i<nums.size(); i++) {

            //同一树枝去重－未回溯

            if(used[i] == true) {

                continue;

            }

            

            //处理－递归－回溯

            path.push_back(nums[i]);

            used[i] = true;

            

            backTracking(nums,used);

            

            used[i] = false;

            path.pop_back();

        }

        

        return;

    }

public:

    vector<vector<int>> permute(vector<int>& nums) {

        result.clear();

        path.clear();

        

        if(nums.size() == 0)

            return result;

        

        vector<bool> used(nums.size(),false);

        

        backTracking(nums,used);

        return result;

    }

};

        

    
