//方法一，递归法
class Solution {

private:

    int maxLen = INT_MIN;

    int maxLeftValue = 0;

    

    void traversal(TreeNode* node,int leftLen) {

        //判断条件

        if(!node->left && !node->right) {

            //不断更新的状态

            if(leftLen > maxLen) {

                maxLen = leftLen;

                maxLeftValue = node->val;

            }

        }

        

        //左

        if(node->left) {

            leftLen++;

            traversal(node->left,leftLen); //递归

            leftLen--;                     //回溯

        }   //用回溯的方法，记录每个结点深度

            //而不必麻烦的使用pair<结点，深度>

        

        //右

        if(node->right) {

            leftLen++;

            traversal(node->right,leftLen);

            leftLen--;

        }

    }

    

public:

    

    int findBottomLeftValue(TreeNode* root) {

        if(root == nullptr) 

            return 0;

            

        traversal(root,0);

        

        return maxLeftValue;

    }

};

//方法二，迭代法
/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

public:

    int findBottomLeftValue(TreeNode* root) {

        if(root == nullptr) return 0;

        

        queue<TreeNode*> que;

        que.push(root);

        int result = 0;

        

        while(!que.empty()) {

            int size = que.size();

            

            for(int i=0; i<size; i++) {

                TreeNode* node = que.front();

                que.pop();

            

                //如何记录，最后一行

                //记录所有，不断刷新

                //最后一个刷新值就是，最后一行 

                if(i==0) result = node->val;

            

                if(node->left)

                    que.push(node->left);

             
