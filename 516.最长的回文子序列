//动态规划

class Solution {

public:

    int longestPalindromeSubseq(string s) {

        //定义＋初始化

        vector<vector<int>> dp(s.size(), vector<int>(s.size(), 0));

        

        //初始化－dp[i][j]  i==j

        //从递推公式可以看出， i != j

        for(int i = 0; i < s.size(); i++) {

            //同一个字母，肯定是回文子串

            dp[i][i] = 1;

        }

        

        //递推

        for(int i = s.size()-1; i >= 0; i--) {

            for(int j = i+1; j < s.size(); j++) {

                if(s[i] == s[j]) {

                    dp[i][j] = dp[i+1][j-1] + 2;

                }

                else {

                    dp[i][j] = max(dp[i][j-1], 

                                   dp[i+1][j]);

                }

            }

        }

        

        //[0, s.size()-1]

        return dp[0][s.size()-1];

    }

};
