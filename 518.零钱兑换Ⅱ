//完全背包－组合问题

class Solution {

public:

    int change(int amount, vector<int>& coins) {

        //定义

        vector<int> dp(amount + 1, 0);

        

        //初始化

        dp[0] = 1;

        

        //完全背包

        for(int i = 0; i < coins.size(); i++) {

            for(int j = coins[i]; j <= amount; j++) {

                dp[j] += dp[j - coins[i]];

            }

        }

        

        return dp[amount];

    }

};



/*

//0-1背包

for(int i = 0; i < weight.size(); i++) {

    //从后向前，不可重复利用

    for(int j = bagSize; j >= weight[i]; j--) {

        dp[j] = max(dp[j], 

                    dp[j - weight[i]] + value[i]);

    }

}

//完全背包

for(int i = 0; i < weight.size(); i++) {

    //从前向后，可重复利用

    for(int j = weight[i]; j <= bagSize; j++) {

        dp[j] = max(dp[j], 

                    dp[j - weight[i]] + value[i]);

    }

}
