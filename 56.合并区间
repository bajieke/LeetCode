//贪心算法(每次合并最大右边界)

class Solution {

private:

    static bool cmp(vector<int>& a, vector<int>& b) {

        return a[0] < b[0];

    }

    

public:

    vector<vector<int>> merge(vector<vector<int>>&

                                         intervals) {

        vector<vector<int>> result;

        bool flagFinal = false;

        

        if(intervals.size() == 0) return result;

        

        sort(intervals.begin(), intervals.end(), cmp);

        

                            //加加到，第二个[i]

        for(int i=1; i<intervals.size(); i++) {

            //标记第一个[i-1]

            int start = intervals[i-1][0];

            int end = intervals[i-1][1];

            

            //不断合并

            while(i<intervals.size() && intervals[i][0]

                                               <=end) {

                end = max(intervals[i][1], end);

                

                if(i == intervals.size()-1)

                    flagFinal = true;

                //加加到，第一个[i-1]

                i++;

            }

            

            result.push_back({start, end});

        }

        

        int length = intervals.size();

        

        //判断最后一个有没有被包含到前面

        if(flagFinal == false) 

            result.push_back({intervals[length-1][0], 

                              intervals[length-1][1]});

        

        return result;

    }

};

*/

//贪心算法

class Solution {

public:

    vector<vector<int>> merge(vector<vector<int>>& 

                                        intervals) {

        vector<vector<int>> result;

        

        if(intervals.size() == 0) return result;

        

        sort(intervals.begin(), intervals.end(), 

          [](const vector<int>& a,const vector<int>& b)

              { return a[0] < b[0]; });

        

        result.push_back(intervals[0]);

        

        for(int i=1; i<intervals.size(); i++) {

            // [i-1] 与 [i] 相邻

            if(result.back()[1] >= intervals[i][0]) {

                result.back()[1] = max(

                                      result.back()[1],

                                      intervals[i][1]);

            }

            //[i-1] 与 [i] 不相邻

            else {

                result.push_back(intervals[i]);

            }

        }

        

        return result;

    }

};

         
