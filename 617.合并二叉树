/**

 * Definition for a binary tree node.

 * struct TreeNode {

 *     int val;

 *     TreeNode *left;

 *     TreeNode *right;

 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}

 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}

 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}

 * };

 */

class Solution {

public:

    TreeNode* mergeTrees(TreeNode* root1,TreeNode* root2) {

        if(root1 == nullptr)

            return root2;

        if(root2 == nullptr)

            return root1;

        

        queue<TreeNode*> que;

        

        que.push(root1);

        que.push(root2);

        

        while(!que.empty()) {

            TreeNode* node1 = que.front();

            que.pop();

            TreeNode* node2 = que.front();

            que.pop();

            

            node1->val += node2->val;

            


            //结点1，结点2，的左孩子，非空插入

            if(node1->left && node2->left) {

                que.push(node1->left);

                que.push(node2->left);

            }

            

            //结点1，结点2，的右孩子，非空插入

            if(node1->right && node2->right) {

                que.push(node1->right);

                que.push(node2->right);

            }

            

            //node1的左孩子 与 node2的左孩子

            // 0  0   不处理

            // 0  1   node1->left = node2->left;

            // 1  0   不处理

            // 1  1   全部插入队列

            if(!node1->left && node2->left) {

                node1->left = node2->left;

            }

            

            //node1的右孩子 与 node2的右孩子

            // 0  1  

            if(!node1->right && node2->right) {

                node1->right = node2->right;

            }

        }

        return root1;

    }

};



//递归法

class Solution {

public:

    TreeNode* mergeTrees

    (TreeNode* root1, TreeNode* root2) {

        if(root1 == nullptr) 

            return root2;

        if(root2 == nullptr) 

            return root1;

        

        TreeNode* newNode = new TreeNode(0);

        newNode->val = root1->val + root2->val;

        

        newNode->left = mergeTrees(root1->left,

                                 root2->left);

        newNode->right = mergeTrees(root1->right,

                                 root2->right);

        

        return newNode;

    }

};
