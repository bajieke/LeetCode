/*

//深度优先遍历

class Solution {

private:

    int dfs(int i, int j, int m, int n) {

        //递归退出条件

        

        //1.越界

        if(i > m || j > n) return 0;

        

        //2.达到叶子结点

        if(i == m && j==n) return 1;

        

        

        //递归

        return dfs(i+1, j, m, n) + dfs(i, j+1, m, n);

    }

public:

    int uniquePaths(int m, int n) {

       return dfs(1, 1, m, n) ;

    }

};

*/

/*

//动态规划

class Solution {

public:

    int uniquePaths(int m, int n) {

        //定义dp[][]

        vector<vector<int>> dp(m, vector<int>(n, 0));

        

        //初始化，上边一层

        for(int i = 0; i < m; i++) {

            dp[i][0] = 1;

        }

        

        //初始化，左边一层

        for(int j = 0; j < n; j++) {

            dp[0][j] = 1;

        }

        

        //开始遍历

        for(int i = 1; i < m; i++) {

            for(int j = 1; j < n; j++) {

                dp[i][j] = dp[i-1][j] + dp[i][j-1];

            }

        }

         

        return dp[m-1][n-1];

    }

};

*/

/*

//动态规划－优化空间

class Solution {

public:

    int uniquePaths(int m, int n) {

        //定义dp[]

        vector<int> dp(n);

            

        //初始化

        for(int i = 0; i < n; i++) {

            dp[i] = 1;

        }

         

        //开始遍历

        for(int i = 1; i < m; i++) {

            for(int j = 1; j < n; j++) {

                dp[j] = dp[j] + dp[j-1];

            }

        }

        

        return dp[n-1];

    }

};

*/

class Solution {

public:

    int uniquePaths(int m, int n) {

        //分子

        long long numerator = 1;

        

        //分母从 m-1 开始

        int denominator = m - 1;

        

        int N = m-1;

        int M = m + n - 2;

        

        //边乘，边除 —— 防止溢出

        while(N--) {

            numerator *= M--;

            

            while(denominator != 0 

                 //&& numerator % denominator == 0

                 ) {

                numerator /= denominator;

                denominator--;

            }

        }

        

        return numerator;

    }

};
