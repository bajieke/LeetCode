class Solution {

public:

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {

        

        //确定行，列个数

        int m = obstacleGrid.size();

        

        int n = obstacleGrid[0].size();

        

        //定义dp数组

        vector<vector<int>> dp(m, vector<int>(n, 0));

        

        //初始化

        for(int i = 0; i < m && obstacleGrid[i][0]==0;

                                            i++)

            dp[i][0] = 1;

            

        for(int j =0 ; j < n && obstacleGrid[0][j]==0;

                                             j++)

            dp[0][j] = 1;

        

        

        //遍历

        for(int i = 1; i < m; i++) {

            for(int j = 1; j < n; j++) {

                //有障碍物

                if(obstacleGrid[i][j] == 1) continue;

            

                dp[i][j] = dp[i-1][j] + dp[i][j-1];

            }

        }

        

        return dp[m-1][n-1];

    } 

};

