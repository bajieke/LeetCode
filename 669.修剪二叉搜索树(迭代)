//迭代法

class Solution {

public:

    TreeNode* trimBST(TreeNode* root,int low,int high) {

        //0.不符合条件

        if(root == nullptr) return nullptr;

        

        //1.找到符合条件的结点

        while(root!=nullptr && (root->val < low ||

                                root->val >high)) {

            if(root->val < low)

                root = root->right;

            else

                root = root->left;

        }

        

        //2.找到了符合条件的结点---------------这是以下处理的前提条件

        TreeNode* cur = root;

        

        //2.1 处理左子树中 < low

        while(cur != nullptr) {

            //(1).寻找

            while(cur->left && cur->left->val < low) {

                cur->left = cur->left->right;

            }

            //(2).改变指向

            cur =cur->left;

        }

        

        

        cur = root;

        //2.2 处理右子树中 > high

        while(cur != nullptr) {

            while(cur->right && cur->right->val > high)

                                                     {

                cur->right = cur->right->left;

            }

            cur = cur->right;

        }

        

        //3. 处理完毕，返回

        return root;

    }

};
