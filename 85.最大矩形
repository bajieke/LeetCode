//单调栈－dp数组(动态规划)

class Solution {  

private:

    //最大柱形图              //不能改变dp数组

    int largestRectangleArea(vector<int> height) {

        //

        height.insert(height.begin(), 0);

        height.push_back(0);        

        stack<int> stk;

        

        int res = height[0];

        

        for(int i = 0; i < height.size(); i++) {

            //

            while(!stk.empty() && height[i] <

                                height[stk.top()]) {

                

                int cur = stk.top();

                stk.pop();

                

                int left = stk.top() + 1;

                int right = i - 1;

            

                res = max(res, height[cur]*

                                     (right-left+1));

            }

            

            stk.push(i);

        }

        

        return res;

    }

    

public:

    //最大面积

    int maximalRectangle(vector<vector<char>>& matrix) 

                                                     {

        if(matrix.size() == 0) return 0;

        

        //定义＋初始化

        vector<int> dp(matrix[0].size(), 0);

        int maxArea = 0;

        

        for(int i = 0; i < matrix.size(); i++) {

            //遍历一行

            for(int j = 0; j < matrix[0].size(); j++) {

                if(matrix[i][j] == '1') {

                    dp[j] ++;

                }

                else {

                    dp[j] = 0;

                }

            }

            //计算以i层为底的，柱形图的最大面积

            maxArea = max(maxArea, 

                          largestRectangleArea(dp));

                          //maxRectangleArea(dp));

        }

        

        return maxArea;

    }

};
