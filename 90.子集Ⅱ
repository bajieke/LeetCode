//回溯法

class Solution {

private:

    vector<vector<int>> result;

    vector<int> path;

    

    //回溯－去重

    void backTracking(vector<int>& nums,

                                int startIndex,

                                vector<bool>& used) {

        //result 收集结果

        result.push_back(path);

        

        //退出条件

        if(startIndex >= nums.size()) {

            return;

        }

        

        //递归－回溯

        for(int i=startIndex; i<nums.size(); i++) {

            //去重

            if(i>0 && nums[i]==nums[i-1] && 

                                used[i-1]==false) {

                continue;

            }

        

            path.push_back(nums[i]);

            used[i] = true;

            

            backTracking(nums,i+1,used);

           

            used[i] = false;

            path.pop_back();

        }

    }

public:

    vector<vector<int>> subsetsWithDup(vector<int>& 

                                              nums) {

        result.clear();

        path.clear();

        

        if(nums.size() == 0)

            return result;

        

        vector<bool> used(nums.size(),false);

        

        //去重＋排序

        sort(nums.begin(),nums.end());

        backTracking(nums,0,used);

        

        return result;

        

    }

};
