class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        
        if(board.empty() || word[0]=='\0')
            return false;
            
        int rows=board.size();
        int cols=board[0].size();
        int pathLength=0;
        vector<vector<bool>>visited;
        
        visited=vector<vector<bool>>(rows,vector<bool>(cols,false));
         
        for(int row=0;row<rows;row++)
        {
            for(int col=0;col<cols;col++)
            {
                if(exitCore(board,rows,cols,row,col,pathLength,visited,word))
                {
                    return true;
                }
            }
        }
        
        return false;
    }
    
private:  
    bool exitCore(const vector<vector<char>>&board,int rows,int cols,int row,int col,int& pathLength,vector<vector<bool>>&visited,const string word)
    {
        if(word[pathLength]=='\0')
        {
            return true;
        }
        
        int exit=false;
        
    if(row>=0 && row<rows && col>=0 && col<cols && board[row][col]==word[pathLength] && visited[row][col]==false)
        {
            //满足条件，标记为真
            pathLength++;
            visited[row][col]=true;
            
            //寻找相邻满足条件的方块
                       exit=exitCore(board,rows,cols,row-1,col,pathLength,visited,word)
              || exitCore(board,rows,cols,row+1,col,pathLength,visited,word)
              || exitCore(board,rows,cols,row,col-1,pathLength,visited,word)
              || exitCore(board,rows,cols,row,col+1,pathLength,visited,word);
            //此方块不满足条件，取消标记，返回上一层
            if(!exit)
            {
                pathLength--;
                visited[row][col]=false;
            }
        
        }
        
        
        return exit;
        
    }
    
    
};


        
     
