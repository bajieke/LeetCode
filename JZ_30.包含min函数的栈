//包含min函数的栈

//时间复杂度O(1)－－牺牲空间换时间

class MinStack {

private:

    //构造两个栈元素

    ::stack<int> stack;  //数据栈

    ::stack<int> minStack;  //辅助栈

    

public:

    /** initialize your data structure here. */

    //包含min函数特殊栈 的 初始化

    MinStack() {

    

        //栈清空

        while(! stack.empty()) {

            stack.pop();

        }

        

        while(! minStack.empty()) {

            minStack.pop();

        }

    }

    

    //入栈，比较 辅助栈顶 与 x大小

    void push(int x) {

        //数据栈

        stack.push(x);

        

        //辅助栈

        if(minStack.size() == 0 || x < minStack.top()) {

            minStack.push(x);

        }

        else {

            minStack.push(minStack.top());

        }

    }

    

    //出栈

    void pop() {

        if(stack.size()==0 || minStack.size()==0) {

            return;

        }

        else {

            stack.pop();

            minStack.pop();

        }

    }

    

    //栈顶元素

    int top() {

        if(stack.size() > 0) {

            return stack.top();

        }

        return -1;

    }

    

    int min() {

        if(minStack.size() > 0) {

            return minStack.top();

        }

        return -1;

    }

};

 
