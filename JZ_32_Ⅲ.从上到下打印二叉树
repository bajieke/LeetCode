//JZ_32.从上到下打印二叉树

//奇数层－正序输出

//偶数层－逆序输出

class Solution {

public:

    vector<vector<int>> levelOrder(TreeNode* root) {

        //奇层栈

        stack<TreeNode*> stk1;

        //偶层栈

        stack<TreeNode*> stk2;

        

        vector<vector<int>> result;

        

        if(root) stk1.push(root);

        

        //第一层 是 奇数层

        int num = 1;

        

        while(!stk1.empty() || !stk2.empty()) {

            //临时temp

            vector<int> temp;

            //当前－奇数层－正序输出

            if(num % 2 == 1) {

                int size = stk1.size();

                for(int i = 0; i < size; i++) {

                    temp.push_back(stk1.top()->val);

            

                    //要使得下一层－逆序输出－先左后右()

                    if(stk1.top()->left)

                        stk2.push(stk1.top()->left);

                    if(stk1.top()->right)

                        stk2.push(stk1.top()->right);

            

                    stk1.pop();

                } 

            }

            else {//当前－偶数层－逆序输出

                int size = stk2.size();

                for(int i = 0; i < size; i++) {

                    temp.push_back(stk2.top()->val);

                    

                    //要使得下一层－正序输出－先右后左()

                    if(stk2.top()->right)

                        stk1.push(stk2.top()->right);

                    if(stk2.top()->left)

                        stk1.push(stk2.top()->left);

            

                    stk2.pop();

                }

            }

            result.push_back(temp);

            num++;

        }

        return result;

    }

};
