/*

// Definition for a Node.

class Node {

public:

    int val;

    Node* next;

    Node* random;

    

    Node(int _val) {

        val = _val;

        next = NULL;

        random = NULL;

    }

};

*/

//哈希法，空间换时间－效率看起来很高

class Solution {

public:

    Node* copyRandomList(Node* head) {

        if(!head) return head;

        

        unordered_map<Node*, Node*> umap;

        

        Node* cur = head;

        //克隆对应结点

        while(cur) {

            umap[cur] = new Node(cur->val);

            

            cur = cur->next;

        }

        

        cur = head;

        //构造的对应结点的 next 和 random 指向

        while(cur) {

            umap[cur]->next = umap[cur->next];

            umap[cur]->random = umap[cur->random];

            

            cur = cur->next;

        }

        

        return umap[head];

    }

};



/*

//JZ_35.复杂链表的复制

//拆分问题

class Solution {

private:

    //克隆复杂链表的结点

    void clonedNode(Node* head) {

        if(!head) return;

        

        Node* node = head;

        while(node) {

            //克隆

            Node* newNode = new Node(node->val);

            newNode->next = nullptr;

            newNode->random = nullptr;

            

            //连接

            newNode->next = node->next;

            node->next = newNode;

            node = newNode->next;

        }

    }

    

    //指定新复杂链表结点的random指向

    void connectRandom(Node* head) {

        if(!head) return;

        

        Node* node = head;

        

        while(node) {

            Node* newNode = node->next;

            if(node->random) {

                newNode->random = node->random->next;

            }

            node = newNode->next;

        }

    }

    

    //分拆新旧复杂链表

    Node* reConnectNode(Node* head) {

        if(!head) return head;

        

        Node* node = head;

        Node* clonedHead = head->next;

        Node* clonedNode = head->next;

        

        //还要考虑－－只有一个结点的情况

        //if(clonedNode->next) {

        if(node) {

            node->next = clonedNode->next;

            node = clonedNode->next;

        }

        

        while(node) {

            //更新克隆结点

            clonedNode->next = node->next;

            clonedNode = node->next;

            

            //更新旧链表

            node->next = clonedNode->next;

            node = clonedNode->next;

        }

        

        return clonedHead;

    }

public:

    Node* copyRandomList(Node* head) {

        //1.克隆结点

        clonedNode(head);

        

        //2.链接random部分

        connectRandom(head);

        

        //3.分拆(A A')链表

        return reConnectNode(head);

    }

};

*/

     

