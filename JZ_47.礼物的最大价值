/*

//动规

class Solution {

public:

    int maxValue(vector<vector<int>>& grid) {

        int m = grid.size();

        int n = grid[0].size();

        

        //定义

        vector<vector<int>> dp(m, vector<int>(n));

        dp[0][0] = grid[0][0];

        

        //初始化

        for(int i = 1; i < m; i++) {

            dp[i][0] = dp[i-1][0] + grid[i][0];

        }

        

        for(int j = 1; j < n; j++) {

            dp[0][j] = dp[0][j-1] + grid[0][j];

        }

        

        //动态－递推过程

        for(int i = 1; i < m; i++) {

            for(int j = 1; j < n; j++) {

                dp[i][j] = max(dp[i][j-1], dp[i-1][j])

                            + grid[i][j];

            }

        }

        

        //结果

        return dp[m-1][n-1];

    }

};

*/

//动态规划－降维

class Solution {

public:

    int maxValue(vector<vector<int>>& grid) {

        int m = grid.size();

        int n = grid[0].size();

        

        //定义

        vector<int> dp(n);

        dp[0] = grid[0][0];

        

        //初始化

        for(int j = 1; j < n; j++) {

            dp[j] = dp[j-1] + grid[0][j];

        }

        

        //动规－递推过程

        for(int i = 1; i < m; i++) {

            //更新

            dp[0] = dp[0] + grid[i][0];

            //递推

            for(int j = 1; j < n; j++) {

                //dp[j]   ->  dp[i-1][j]

                //dp[j-1] ->  dp[i][j-1]

                dp[j] = max(dp[j], dp[j-1])

                        + grid[i][j];

            }

        }

        

        //结果

        return dp[n-1];

    }

};

 
