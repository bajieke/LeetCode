/*

//哈希

class Solution {

public:

    char firstUniqChar(string s) {

        unordered_map<char, int> umap;

        

        for(int i = 0; i < s.size(); i++) {

            if( umap[s[i]] != 0 ) {

                umap[s[i]]++;

            }

            else {

                umap[s[i]] = 1;

            }

        }

        

        for(int i = 0; i < s.size(); i++) {

            if(umap[s[i]] == 1) {

                return s[i];

            }

        }

        

        return ' ';

    }

};

*/

/*

//简单哈希数组－哈希优化－效率提高了

class Solution {

public:

    char firstUniqChar(string s) {

        unsigned int hash[123] = {0};

        

        for(int i = 0; i < s.size(); i++) {

            hash[s[i]]++;

        }

        

        for(int i = 0; i < s.size(); i++) {

            if(hash[s[i]] == 1) {

                return s[i];

            }

        }

        

        return ' ';

    }

};

*/

/*

//暴力法

class Solution {

public:

    int firstUniqChar(string s) {

        

        int i , j;

        for(i = 0; i < s.size(); i++) {

            //

            bool flag = false;

            

            for(j = i+1; j < s.size(); j++) {

                //

                if(s[i] == s[j]) {

                    flag = true;

                    break;

                }

                

                

            }

            

            if(flag == false) {

                return s[i];

            }

        }

        

        return ' ';

    }

};

*/

//暴力法

class Solution {

public:

    int firstUniqChar(string s) {

        //特殊情况

        if(s.size() == 1) return s[0];

        

        int i, j;

    

        for(i = 0; i < s.size(); i++) {

            for(j = i+1; j < s.size(); j++) {

                //判断依据

                if(s[i] == s[j]) {

                    break;

                }

                //处理到了最后一步

                if(j == s.size()-1) {

                    return s[i];

                }

            }

        }

        

        return ' ';

    }

};

 

     
