//二分查找－升级

class Solution {

private:

    //寻找左边界

    int getFirst(const vector<int>& nums, int left, 

                             int right, int target) {

        //直到最后也没找到target

        //left == right的时候，还要进行判断左右边界

        if(left > right) {

            return -1;

        }

        

        int mid = left + (right-left)/2;

        

        if(nums[mid] == target) {

            //前一位 ≠ target，才算是左边界

            if(mid == 0 || (mid > 0 && 

                  nums[mid-1] != target)) {

                //真正找到左边界，才返回

                return mid;

            }

            else {

                right = mid - 1;

            }

        }

        else if(nums[mid] < target) {

            left = mid + 1;

        }

        else { //nums[mid] > target

            right = mid - 1;

        }

        

        //前面的一路return, 最终返回

        return getFirst(nums, left, right, target);

    }

    

    //寻找右边界

    int getLast(const vector<int>& nums, int left, 

                            int right, int target) {

        //始终没找到

        if(left > right) {

            return -1;

        }

        

        int mid = left + (right-left)/2;

        

        if(nums[mid] == target) {

            //后一位 ≠ target，才算是右边界

            if(mid == nums.size()-1 || (mid <                         

             nums.size()-1 && nums[mid+1] != target)) {

                //

                return mid;

            }

            else {

                left = mid + 1;

            }

        }

        else if(nums[mid] < target) {

            left = mid + 1;

        }

        else { //nums[mid] > target

            right = mid - 1;

        }

        

        return getLast(nums, left, right, target);

    }

    

public:

    int search(vector<int>& nums, int target) {

        

        int first = getFirst(nums, 0, nums.size()-1,

                                             target);

        int last = getLast(nums, 0, nums.size()-1,

                                             target);

        

        if(first > -1 && last > -1) {

            return last - first + 1;

        }

        

        return 0;

        

    }

};

                            
