/*

class Solution {

public:

    vector<int> maxSlidingWindow(vector<int>& nums, int k) {

    }

};

*/

/*

class Solution {

public:

    vector<int> maxSlidingWindow(vector<int>& nums, int k) {

        //判断特殊情况

        int n = nums.size();

        if(n < k || k <= 0) return {};

        //滑动窗口的前后指针

        int low =  1 - k,high = 0; 

        

        deque<int> dq;//双端队列

        vector<int> res;

        

        while(high < n){

            //判断滑窗的low端是否是最大的元素

            if(low >= 1 && nums[low - 1] == dq[0]) dq.pop_front();

 

            while(!dq.empty() && dq[0] < nums[high]) dq.pop_front();//小于nums[high]的元素出队

            while(!dq.empty() && dq[dq.size()-1] < nums[high]) dq.pop_back();//小于nums[high]的元素出队

            //此时的high指针进队

            dq.push_back(nums[high]);

            if(low >= 0) res.push_back(dq[0]);//当low >= 0，滑窗已经形成

            low ++;

            high ++;

        }

        return res;

    }

};


vector<int> maxSlidingWindow(vector<int>& nums, int k) {

        //

        vector<int> result;

        deque<int> dque;  //最大队列

        

        if(k > nums.size() || k <= 0) {

            return result;

        }

        

        int i = -k + 1;  //初始 i 前k-1个 空格

        int j = 0;       //初始 j 第一个元素

        

        while(j < nums.size()) {

            //删除－不在[i, j]范围内的dque里的元素

            if(i >= 1 && nums[i-1] == dque.front()) {

                dque.pop_front();

            }

            

            //始终保持最大队列

            while(!dque.empty() && dque.back() < 

                                        nums[j]) {

                dque.pop_back();

            }

            

            //插入当前元素

            dque.push_back(nums[j]);

            

            //收集[i, j] 范围最大值

            if(i >= 0) {

                result.push_back(dque.front());

            }

            

            //继续前进

            i++;

            j++;

        }

        

        return result;

    }

};




  
