/*

class MaxQueue {

public:

    MaxQueue() {

    }

    

    int max_value() {

    }

    

    void push_back(int value) {

    }

    

    int pop_front() {

    }

};

*/

/*

//两个双端队列进行模拟

class MaxQueue {

public:

    MaxQueue():curIndex(0){

        //初始化

        maxQue.clear();

        que.clear();

    }

    

    int max_value() {

        if(!maxQue.empty()) {

            return maxQue[0].number;

        }

        return -1;

    }

    

    //尾插

    void push_back(int value) {

        //maxQuoe 中 所有比value小的全部pop

        //保留最大值永远在队首

        while(!maxQue.empty() && value > 

                                 maxQue[0].number) {

            maxQue.pop_front();

        }

        

        Data data = {value, curIndex};

        maxQue.push_back(data);

        que.push_back(data);

        

        curIndex++;

    }

    

    //头删

    int pop_front() {

        //删除的，正好是队首的元素

        if(!maxQue.empty() && maxQue[0].index == 

                              que[0].index) {

            maxQue.pop_front();

        }

        

        if(que.empty()) return -1;

        

        int temp = que.front().number;

        que.pop_front();

        

        return temp;

    }

    

private:

    struct Data {

        int number;

        int index;

    };

    

    

    deque<Data> maxQue;//最大数队列

    

    deque<Data> que;  //真实队列

    

    int curIndex = 0; //模拟下标，区分每一个数

};

*/

/**

 * Your MaxQueue object will be instantiated and called as such:

 * MaxQueue* obj = new MaxQueue();

 * int param_1 = obj->max_value();

 * obj->push_back(value);

 * int param_3 = obj->pop_front();

 */

 

 
//最大数队列

class MaxQueue {

private:

    //双端队列  头删－尾删＋尾插

    deque<int> maxdeque; // 尾部删除'，尾部添加

    //队列 (头)删－(尾)插

    queue<int> que;  //尾部添加

    

public:

    MaxQueue() { }

    

    int max_value() {

        if(maxdeque.empty()) {

            //maxdeque都为空了，那么真实que也空

            return -1;

        }

        else {

            //返回当前，真实存在的最大值

            return maxdeque.front();

        }

    }

    

    void push_back(int val) {

        //尾插，插入的时候只能尾巴插入

        que.push(val);

        

        while(!maxdeque.empty() && maxdeque.back() < 

                                                val) {

            //双端队列，才能尾部也删除

            maxdeque.pop_back();

        }

        

        //尾插

        maxdeque.push_back(val);

    }

    

    int pop_front() {

        if(que.empty()) return -1;

        

        int temp = que.front();

        

        if(temp == maxdeque.front()) {

            //头删

            maxdeque.pop_front();

        }

        

        //头删－不分头尾(默认就是删头)

        que.pop();

        

        return temp;

    }

};

     
 
