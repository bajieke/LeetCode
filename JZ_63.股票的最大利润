/*

//动态规划

class Solution {

public:

    int maxProfit(vector<int>& prices) {

        vector<vector<int>> dp(prices.size(),

                               vector<int>(2));

                               

        if(prices.size() == 0) return 0;

        

        dp[0][0] = -prices[0];

        dp[0][1] = 0;

        

        for(int i = 1; i < prices.size(); i++) {

            //虚拟－买入

            dp[i][0] = max(dp[i-1][0], -prices[i]);

            

            //虚拟－卖出

            dp[i][1] = max(dp[i-1][1], dp[i-1][0] + 

                                        prices[i]);

        }

        

        return dp[prices.size() - 1][1];

    }

};

*/

    

/*

//动态规划－优化空间

class Solution {

public:

    int maxProfit(vector<int>& prices) {

        if(prices.size() == 0) return 0;

        

        int dp[2] = {-prices[0], 0};

        

        for(int i = 1; i < prices.size(); i++) {

            //虚拟－买入

            dp[0] = max(dp[0], -prices[i]);

            

            //虚拟－卖出

            dp[1] = max(dp[1], dp[0] + prices[i]);

        }

        

        return dp[1];

    }

};

*/

/*

//贪心算法－最优解

class Solution {

public:

    int maxProfit(vector<int>& prices) {

        //特殊情况

        if(prices.size() == 0) return 0;

        

        int result = 0;

        int low = prices[0];

        

        for(int i = 1; i < prices.size(); i++) {

            //更新最大利润

            result = max(result, prices[i] - low);

            

            //记录最小购入价格

            low = min(low, prices[i]);

        }

        

        return result;

    }

};

*/

//暴力算法－超出时间限制

class Solution {

public:

    int maxProfit(vector<int>& prices) {

        if(prices.size() == 0) return 0;

        

        int result = 0;

        

        for(int i = 0; i < prices.size()-1; i++) {

            for(int j = i+1; j < prices.size(); j++) {

                //

                result = max(result, 

                        prices[j] - prices[i]);

            }

        }

        

        return result;

    }

};

      

    
